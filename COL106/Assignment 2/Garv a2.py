def HeapDown(heap, indices, i, N):
    large = i
    if ((2*i+1) < N and heap[2*i+1][0] < heap[large][0]):
        large = 2*i+1
    if ((2*i+2) < N and heap[2*i+2][0] < heap[large][0]):
        large = 2*i+2
    # if((2*i+2)<N and heap[2*i+1][0]==heap[2*i+2][0]):
    #     if(heap[2*i+2][5]>heap[2*i+1][5]): large=2*i+1
    #     else: large=2*i+1
    # if((2*i+1)<N and heap[2*i+1][0]==heap[i][0]):
    #     if(heap[2*i+1][5]>heap[i][5]): large=i
    #     else: large=2*i+1
    # if((2*i+2)<N and heap[2*i+2][0]==heap[i][0]):
    #     if(heap[2*i+2][5]>heap[i][5]): large=i
    #     else: large=2*i+2
    if (large == i):
        if ((2*i+2) < N and heap[i][0] == heap[2*i+1][0] == heap[2*i+2][0]):
            if (heap[large][5] > heap[2*i+1][5]):
                large = 2*i+1
            if (heap[large][5] > heap[2*i+2][5]):
                large = 2*i+2
        elif ((2*i+2) < N and heap[i][0] == heap[2*i+2][0]):
            if (heap[large][5] > heap[2*i+2][5]):
                large = 2*i+2
        elif ((2*i+1) < N and heap[i][0] == heap[2*i+1][0]):
            if (heap[large][5] > heap[2*i+1][5]):
                large = 2*i+1

    if (large != i):
        heap[large], heap[i] = heap[i], heap[large]
        indices[heap[i][5]], indices[heap[large][5]
                                     ] = indices[heap[large][5]], indices[heap[i][5]]
        HeapDown(heap, indices, large, N)


def HeapUp(heap, indices, i, N):
    if (i != 0):
        small = i
        if (heap[(i-1)//2][0] > heap[i][0]):
            small = (i-1)//2
        elif (heap[(i-1)//2][0] == heap[i][0] and heap[(i-1)//2][5] > heap[(i-1)//2][5]):
            small = (i-1)//2
        if (small != i):
            heap[small], heap[i] = heap[i], heap[small]
            indices[heap[i][5]], indices[heap[small][5]
                                         ] = indices[heap[small][5]], indices[heap[i][5]]
            HeapUp(heap, indices, small, N)


def BuildHeap(heap, indices, N):
    for i in range(N//2-1, -1, -1):
        HeapDown(heap, indices, i, N)


def listCollisions(M=[], x=[], v=[], m=0, T=0):
    N = len(x)
    if (N == 0 or m == 0 or T == 0):
        return []
    # heap = [None]*(N-1)
    # indices = [None]*(N-1)
    collisions, heap, indices = [], [], []
    for i in range(0, N-1):
        coltime = 0
        if (v[i] == v[i+1]):
            coltime = T+1
        else:
            coltime = (x[i+1]-x[i])/(v[i]-v[i+1])
        if (coltime < 0):
            coltime = T+1
        heap.append([coltime, x[i], v[i], M[i], 0, i])
        indices.append(i)
    heap.append([T+1, x[N-1], v[N-1], M[N-1], 0, N-1])
    indices.append(N-1)
    BuildHeap(heap, indices, N)
    t = 0
    while (m > 0):
        # print(heap)
        if (heap[0][0] > T):
            break
        large = 0
        if (heap[0][0] == heap[1][0] == heap[2][0]):
            large = 0
            if (heap[0][5] > heap[1][5]):
                large = 1
            if (heap[large][5] > heap[2][5]):
                large = 2
        elif (heap[0][0] == heap[1][0]):
            if (heap[0][5] > heap[1][5]):
                large = 1
        elif (heap[2][0] == heap[0][0]):
            if (heap[0][5] > heap[2][5]):
                large = 2
        if (large != 0):
            heap[large], heap[0] = heap[0], heap[large]
            indices[heap[0][5]], indices[heap[large][5]
                                         ] = indices[heap[large][5]], indices[heap[0][5]]
        m -= 1
        t = heap[0][0]
        in0 = heap[0][5]
        in1 = indices[in0+1]
        newx = heap[0][1]+heap[0][2]*(t-heap[0][4])
        v0new = ((heap[0][3]-heap[in1][3])/(heap[0][3]+heap[in1][3])) * \
            heap[0][2] + ((2*heap[in1][3]) /
                          (heap[0][3]+heap[in1][3]))*heap[in1][2]
        v1new = ((2*heap[0][3])/(heap[0][3]+heap[in1][3]))*heap[0][2] - \
            ((heap[0][3]-heap[in1][3])/(heap[0][3]+heap[in1][3]))*heap[in1][2]
        collisions.append((round(t, 4), in0, round(newx, 4)))
        if (in0 != 0):
            inb = indices[in0-1]
            if (v0new != heap[inb][2]):
                newt1 = (newx - heap[inb][1] - heap[inb][2]
                         * (t-heap[inb][4]))/(heap[inb][2] - v0new)
                if (newt1 < 0):
                    heap[inb][0] = T+1
                    HeapDown(heap, indices, inb, N)
                else:
                    heap[inb][0] = t+newt1
                    HeapUp(heap, indices, inb, N)
        heap[indices[in0+1]][0] = T+1
        heap[indices[in0+1]][2] = v1new
        heap[indices[in0+1]][1] = newx
        heap[indices[in0+1]][4] = t
        if (in0 != N-2):
            in1 = indices[in0+1]
            ina = indices[in0+2]
            if (v1new != heap[ina][2]):
                newt2 = (heap[ina][1] + heap[ina][2] *
                         (t-heap[ina][4]) - newx)/(v1new - heap[ina][2])
                if (newt2 < 0):
                    heap[in1][0] = T+1
                    HeapDown(heap, indices, in1, N)
                else:
                    heap[in1][0] = t+newt2
                    HeapUp(heap, indices, in1, N)
        heap[indices[in0]][0] = T+1
        heap[indices[in0]][1] = newx
        heap[indices[in0]][2] = v0new
        heap[indices[in0]][4] = t
        HeapDown(heap, indices, indices[in0], N)
    return collisions


# print(listCollisions([940.1440594570123, 342.32941684559046, 686.1000355388383, 520.8309066514597, 870.9632698994412, 727.2119773442081], [2.5912045650076445, 3.3979994719550377, 5.247957197003846, 5.383388625251065, 5.440818809376985, 6.415333653364417], [99.79672039800879, 94.19054127616612, 25.977729855078213, 25.5959601276192, 31.543951443609476, 25.267596192531126], 8, 4.531827813401554))
# print(listCollisions([940.1440594570123, 342.32941684559046, 686.1000355388383, 520.8309066514597, 870.9632698994412, 727.2119773442081], [2.5912045650076445, 3.3979994719550377, 5.247957197003846, 5.383388625251065, 5.440818809376985, 6.415333653364417], [99.79672039800879, 94.19054127616612, 25.977729855078213, 25.5959601276192, 31.543951443609476, 25.267596192531126], 8, 4.531827813401554))
# print(len(listCollisions([1e69, 1.0, 1e6], [0.0, 1.0, 2.0], [
#       0.0, 0.0, -1.0], 1e1000000, float('inf'))))

# print(listCollisions([51684.424302174615, 67578.47742815208, 96026.46595362082, 14365.021477990858, 5214.335702777251, 97306.2046625078, 75191.29809296495, 61919.338397030864, 21203.94101386933, 25694.043585609917, 96953.31852967197, 32082.093539212165, 35601.80541735764, 61921.005086800295, 87041.23142742513, 76619.29371915605, 94709.95680199789, 9243.452780039606, 43216.50341502693, 22730.14933711811, 39391.8799530623, 3786.264623721747, 35354.34898370734, 79311.14586239033, 18394.344791535677, 9835.07121588586, 57367.195941596474, 28762.199398414778, 66976.99213839737, 76645.30732764398, 90650.98751965136, 80544.47746607047, 57500.693369971465, 48941.747802653605, 5890.674463110279, 12442.527241733836, 15611.28162815878, 59109.253616137044, 88272.9409798595, 13690.144774930113, 26934.97783741031, 20105.81074506912, 93511.51364075743, 24918.516664278835, 16222.266706214594, 62483.98137797011, 93305.69877963988, 94389.72337421504, 3706.805847738193, 58467.33247801267], [37.55751082335912, 108.330258857115, 112.2675317049564, 118.92592827606441, 133.5646720024748, 138.6472900027419, 139.7370903491325, 165.06463857598453, 169.96248727259265, 176.62241421498038, 203.15783010330256, 203.4739908480261, 229.9040076874257, 234.72708603172455, 242.13172544562445, 277.61620671061735, 286.91994199998817, 306.7181493151946, 346.2190149047609, 353.09549073081416, 370.99674984539257, 419.2197715486552, 421.51360377464476, 444.2091735326815, 448.95146717228386,
#       478.85066749388636, 504.81518344482265, 518.180710774593, 570.9474361812636, 575.0843592847019, 577.085118336866, 648.8984271191068, 706.4962165028946, 725.5720748078631, 731.4800105891097, 744.7676062750971, 745.6811475145013, 748.222506095711, 759.6324136645127, 799.1000803191354, 799.6619759992524, 829.6233840715853, 855.7156007177601, 888.0373790734959, 927.6434309352378, 944.1401370943471, 965.6465938476093, 976.8500005096288, 988.3958761042604, 997.7616088365057], [5.9794280585320605, 7.533740230408785, 0.23229615137797532, 0.07831679764139787, 8.437598004173818, 6.0879346304799675, 4.955952502164403, 2.5491189553624527, 2.014587556270526, 4.17677453498119, 7.04237956572314, 8.045732332769447, 4.553515731988106, 3.53196736310195, 6.918717647863567, 2.9983778511278003, 0.41385370105197494, 1.3465381917630503, 3.0268004596646625, 2.023002317305862, 3.9258680273037116, 6.202575651312788, 1.6611687340055725, 7.999397151268653, 8.387158657008143, 7.0996614983756325, 9.844949207244388, 8.502612555731082, 1.2184854060756867, 8.309914079945543, 8.767439291032915, 4.040203584678697, 7.251813273353447, 9.229730939962181, 2.325260924629079, 3.3392620442675938, 4.527138142596296, 4.486336694165306, 2.3137758745366566, 9.256050120360968, 7.3500674571752835, 7.420682558347494, 8.844609042477007, 2.6706966622607666, 0.9997910021169654, 1.7686152178919012, 8.707500056733, 0.08689147269634323, 4.198807891763785, 7.9087264946725835], 91, 268.397701733751))
